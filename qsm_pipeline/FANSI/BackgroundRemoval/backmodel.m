function [ phi_e ] = backmodel( airmask, body_rel_susc_brain, mode, padding, spatial_res )
%   This function calculates the field generated by air-tissue interfases.
%   This is done by convolution of the dipole kernel (using the kernel defined by *mode*).
%   To minimize large scale aliasing, the volume is zero-padded in the X, Y and positive Z directions.
%   For the negative Z direction, an homogeneus susceptibility *body_rel_susc_brain* is assumed.
%   The susceptibility of the brain is assumed to be zero.
%
%  Parameters:
%  airmask: Mask that defines the location of air. Other regions will be assumed to have a zero susceptibility.
%  body_rel_susc_brain: Mean susceptibility of tissues in the neck and below.
%  mode: Dipole kernel model. Choose 2 for the Integrated dipole kernel (Jenkinson et al 2005). 
%        Otherwise, the continuous model is used (Salomir et al 2003).
%  padding: vector containing the padding dimension for each axis. By default the volume is doubled in size.
%  spatial_res: voxel size in mm.
%
%  Output:
%  phi_e: Simulated background field 
%
%  Last Modified by Carlos Milovic, 07.07.2020

% Set internal variables
x_air_water = 9.395;
N = size(airmask);
if (nargin<2)
    body_rel_susc_brain = 0.0;
    mode = 2;
    padding = N;
    spatial_res = [1 1 1];
end
if (nargin<3)
    mode = 2;
    padding = N;
    spatial_res = [1 1 1];
end
if (nargin<4)
    padding = N;
    spatial_res = [1 1 1];
end
if (nargin<5)
    spatial_res = [1 1 1];
end
if length(padding) < 3
    padding(2) =  padding(1);
    padding(3) =  padding(1);
end


% Find the first voxel associated with tissue at each direction
for z=1:N(3)
    slice = airmask(:,:,z);
    mval = max(slice(:));
    if mval == 1
        zadd = z;
        break
    end
end
for y=1:N(2)
    slice = squeeze(airmask(:,y,:));
    mval = max(slice(:));
    if mval == 1
        yadd = y;
        break
    end
end
for x=1:N(1)
    slice = squeeze(airmask(x,:,:));
    mval = max(slice(:));
    if mval == 1
        xadd = x;
        break
    end
end

% Create padded volumen initialized with air.
pp = x_air_water*ones( N+2*padding );
% Tissue is set to zero, and air remains unchanged.
pp((padding(1)+1):(padding(1)+N(1)),(padding(2)+1):(padding(2)+N(2)),(padding(3)+1):(padding(3)+N(3))) = x_air_water*(1-airmask);
% Neck and upper body are roughly simulated.
pp((padding(1)+1+xadd):(padding(1)+N(1)-xadd),(padding(2)+1+yadd):(padding(2)+N(2)-yadd),1:(padding(3)+zadd)) = body_rel_susc_brain;

% Create dipole kernel and convolve
if mode == 2
    kernelg = dipole_kernel_fansi( N+2*padding,[1 1 1], 2 );
    pp = real(ifftn( kernelg.*fftn(pp) ));
else
    kernel = dipole_kernel_fansi( N+2*padding,[1 1 1], 0 );
    pp = real(ifftn( kernel.*fftn(pp) ));
end

% Crop to the original dimensions
phi_e = pp((padding(1)+1):(padding(1)+N(1)),(padding(2)+1):(padding(2)+N(2)),(padding(3)+1):(padding(3)+N(3)));

end

